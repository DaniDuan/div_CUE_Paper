library(rTPC)
library(nls.multstart)
library(broom)
library(tidyverse)
library(progress)
df_meta <- read.csv("./data/database.csv") %>%
filter(StandardisedTraitName != "Specific Growth Rate") %>%
select(Strain = OriginalID,resp_rate = StandardisedTraitValue,Temperature = ConTemp)  %>%
mutate(source = "meta")
df_meta <- read.csv("../data/database.csv") %>%
filter(StandardisedTraitName != "Specific Growth Rate") %>%
select(Strain = OriginalID,resp_rate = StandardisedTraitValue,Temperature = ConTemp)  %>%
mutate(source = "meta")
View(df_meta)
df_meta <- read.csv("../data/database.csv")? %>%
df_meta <- read.csv("../data/database.csv")# %>%
View(df_meta)
df_meta <- read.csv("../data/database.csv") %>%
filter(StandardisedTraitName != "Specific Growth Rate")# %>%
View(df_meta)
##################################################################
EMP_data = read.csv("../data/EMP.csv", header = T)
names(EMP_data) = c("ID", "Sample", "Temp", "pH", "Richness")
EMP_data = subset(EMP_data,Temp != "" & Temp <= 25 & Temp > 0)
View(EMP_data)
View(EMP_data)
EMP_data[3,5]
EMP_data[3 & 5,]
EMP_data[3 && 5,]
EMP_data = EMP_data[3 | 5,]
View(EMP_data)
EMP_data = read.csv("../data/EMP.csv", header = T)
names(EMP_data) = c("ID", "Sample", "Temp", "pH", "Richness")
EMP_data = subset(EMP_data,Temp != "" & Temp <= 25 & Temp > 0)
EMP_data[3 || 5,]
EMP_data[3:5,]
EMP_data[,3:5]
EMP_data[,3 &&5]
EMP_data = cbind(EMP_data[,3],EMP_data[,5])
View(EMP_data)
EMP_data = data.frame(Temp = as.integer(EMP_data[,3]),as.integer(EMP_data[,5]))
EMP_data = read.csv("../data/EMP.csv", header = T)
names(EMP_data) = c("ID", "Sample", "Temp", "pH", "Richness")
EMP_data = subset(EMP_data,Temp != "" & Temp <= 25 & Temp > 0)
EMP_data = data.frame(Temp = as.float(EMP_data[,3]),as.float(EMP_data[,5]))
EMP_data = data.frame(Temp = EMP_data[,3],Richness = EMP_data[,5])
View(EMP_data)
EMP_data = data.frame(Temp = EMP_data$Temp,Richness = EMP_data$Richness)
View(EMP_data)
EMP_data = read.csv("../data/EMP.csv", header = T)
names(EMP_data) = c("ID", "Sample", "Temp", "pH", "Richness")
EMP_data = subset(EMP_data,Temp != "" & Temp <= 25 & Temp > 0)
scatter.smooth(EMP_data$Temp, EMP_data$Richness)
# Q-Q plots
par(mfrow=c(1,2))
# create sample data
x <- rt(100, df=3)
# normal fit
qqnorm(x);
qqline(x)
# t(3Df) fit
qqplot(rt(1000,df=3), x, main="t(3) Q-Q Plot",
ylab="Sample Quantiles")
abline(0,1)
# t(3Df) fit
qqplot(rt(1000,df=3), x, main="t(3) Q-Q Plot",
ylab="Sample Quantiles")
abline(0,1)
# normal fit
qqnorm(x);
qqline(x)
# normal fit
qqnl(x);
?qqnorm
# create sample data
x <- rt(100, df=3)
# normal fit
qqnorm(x);
qqline(x)
?qqnorm
nlFit(dataVector)
library("dataVector")
install.packages(dataVector)
install.packages("dataVector")
OO_T_empo2_plot <- ggplot()+
geom_point(data = EMP_data,aes(x=Temp, y=Richness), size=0.8, shape=21)+
labs(x='Temperature',y="Observed OTUs")+
geom_smooth(data = EMP_data,aes(x=Temp, y=Richness), method = "lm", formula = y ~ splines::bs(x,3), se = T)+
theme_bw()+theme(panel.grid=element_blank())+
ggtitle("All Samples") + theme(plot.title = element_text(hjust = 0.5))+
theme(legend.position="bottom")
#+theme(legend.position="none")
OO_T_empo2_plot
OO_T_empo2_plot <- ggplot()+
geom_point(data = EMP_data,aes(x=Temp, y=Richness), size=0.8, shape=21)+
labs(x='Temperature',y="Observed OTUs")+
geom_smooth(data = EMP_data,aes(x=Temp, y=Richness), method = "lm", formula = y ~ splines::bs(x,5), se = T)+
theme_bw()+theme(panel.grid=element_blank())+
ggtitle("All Samples") + theme(plot.title = element_text(hjust = 0.5))+
theme(legend.position="bottom")
#+theme(legend.position="none")
OO_T_empo2_plot
OO_T_empo2_plot <- ggplot()+
geom_point(data = EMP_data,aes(x=Temp, y=Richness), size=0.8, shape=21)+
labs(x='Temperature',y="Observed OTUs")+
geom_smooth(data = EMP_data,aes(x=Temp, y=Richness), method = "lm", formula = y ~ splines::bs(x,2), se = T)+
theme_bw()+theme(panel.grid=element_blank())+
ggtitle("All Samples") + theme(plot.title = element_text(hjust = 0.5))+
theme(legend.position="bottom")
#+theme(legend.position="none")
OO_T_empo2_plot
EMP_data = read.csv("../data/EMP.csv", header = T)
names(EMP_data) = c("ID", "Sample", "Temp", "pH", "Richness")
EMP_data = subset(EMP_data,Temp != "" & Temp <= 25 & Temp > 0)
scatter.smooth(EMP_data$Temp, EMP_data$Richness)
EMP_data = read.csv("../data/EMP.csv", header = T)
names(EMP_data) = c("ID", "Sample", "Temp", "pH", "Richness")
EMP_data = subset(EMP_data,Temp != "" & Temp <= 25 & Temp > 0)
scatter.smooth(EMP_data$Temp, EMP_data$Richness)
par(c(1,1))
?par
par(mfrow = c(1, 1))
EMP_data = read.csv("../data/EMP.csv", header = T)
names(EMP_data) = c("ID", "Sample", "Temp", "pH", "Richness")
EMP_data = subset(EMP_data,Temp != "" & Temp <= 25 & Temp > 0)
scatter.smooth(EMP_data$Temp, EMP_data$Richness)
max(EMP_data$Richness)
m = max(EMP_data$Richness)
EMP_data$relative_rich = EMP_data$Richness/m
View(EMP_data)
scatter.smooth(EMP_data$Temp, EMP_data$relative_rich)
write.csv(EMP_data, "../data/EMP_filtered.csv", row.names=T)
quantile(EMP_data$Richness, probs = 0.99)
quantile(EMP_data$relative_rich, probs = 0.99)
unique(EMP_data$Temp)
i = unique(EMP_data$Temp)[1]
i
subset(EMP_data, Temp = i)
sub = subset(EMP_data, Temp == i)
sub
for i in unique(EMP_data$Temp){
for i in unique(EMP_data$Temp){
for(i in unique(EMP_data$Temp)){
sub = subset(EMP_data, Temp == i)
quan = c(quan, quantile(sub$relative_rich, probs = 0.99))
}
quan = c()
for(i in unique(EMP_data$Temp)){
sub = subset(EMP_data, Temp == i)
quan = c(quan, quantile(sub$relative_rich, probs = 0.99))
}
quan
quantile(sub$relative_rich, probs = 0.99)
quantile(sub$relative_rich, probs = 0.99)[1]
quantile(EMP_data$relative_rich, probs = 0.99)
quantile(EMP_data$relative_rich, probs = 0.99)[2]
quantile(EMP_data$relative_rich, probs = 0.99)
is.na(EMP_data$relative_rich)
EMP_data[is.na(EMP_data$relative_rich),]
EMP_data = read.csv("../data/EMP.csv", header = T)
names(EMP_data) = c("ID", "Sample", "Temp", "pH", "Richness")
EMP_data = subset(EMP_data,Temp != "" & Temp <= 25 & Temp > 0)
scatter.smooth(EMP_data$Temp, EMP_data$Richness)
m = max(EMP_data$Richness)
EMP_data$relative_rich = EMP_data$Richness/m
scatter.smooth(EMP_data$Temp, EMP_data$relative_rich)
EMP_data$relative_rich = EMP_data$Richness - mean(EMP_data$Richness)/var(EMP_data$Richness)
EMP_data$relative_rich
EMP_data$relative_rich = (EMP_data$Richness - mean(EMP_data$Richness))/var(EMP_data$Richness)
EMP_data$relative_rich
